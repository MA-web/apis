/**
 * apis backend
 * Ahmed Abdelrhman & Mohamed sabri
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AttachmentSource } from '../model/attachmentSource';
import { CurrencyDto } from '../model/currencyDto';
import { IncotermDto } from '../model/incotermDto';
import { ItemCategoryDto } from '../model/itemCategoryDto';
import { ItemKeywordDto } from '../model/itemKeywordDto';
import { ItemSampleTypeDto } from '../model/itemSampleTypeDto';
import { OriginDto } from '../model/originDto';
import { PaymentTermDto } from '../model/paymentTermDto';
import { SupplierCategoryDto } from '../model/supplierCategoryDto';
import { TransportationDto } from '../model/transportationDto';
import { UomDto } from '../model/uomDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LookupControllerService {

    protected basePath = 'https://164.92.242.241:8060';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * this api will get all shipings incoterms in the system
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllIncotermsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<IncotermDto>>;
    public getAllIncotermsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IncotermDto>>>;
    public getAllIncotermsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IncotermDto>>>;
    public getAllIncotermsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<IncotermDto>>(`${this.basePath}/lookup/shiping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * this api will get all payment terms in the system
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPaymentTermsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<PaymentTermDto>>;
    public getAllPaymentTermsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PaymentTermDto>>>;
    public getAllPaymentTermsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PaymentTermDto>>>;
    public getAllPaymentTermsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PaymentTermDto>>(`${this.basePath}/lookup/payment-terms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This Api will get all attachments source in the system
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAttachmentsSourceUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<AttachmentSource>>;
    public getAttachmentsSourceUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AttachmentSource>>>;
    public getAttachmentsSourceUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AttachmentSource>>>;
    public getAttachmentsSourceUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<AttachmentSource>>(`${this.basePath}/lookup/attachments-source`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get currencies in the system
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrenciesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<CurrencyDto>>;
    public getCurrenciesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CurrencyDto>>>;
    public getCurrenciesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CurrencyDto>>>;
    public getCurrenciesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CurrencyDto>>(`${this.basePath}/lookup/currency`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get item sample types in the system
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemSampleTypesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<ItemSampleTypeDto>>;
    public getItemSampleTypesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ItemSampleTypeDto>>>;
    public getItemSampleTypesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ItemSampleTypeDto>>>;
    public getItemSampleTypesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ItemSampleTypeDto>>(`${this.basePath}/lookup/sampleTypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This Api will get all items category in the system
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemsCategoryUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<ItemCategoryDto>>;
    public getItemsCategoryUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ItemCategoryDto>>>;
    public getItemsCategoryUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ItemCategoryDto>>>;
    public getItemsCategoryUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ItemCategoryDto>>(`${this.basePath}/lookup/items-category`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * this api is responsiable for list all keywords for user
     *
     * @param keywordName keywordName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemsKeywordsUsingGET(keywordName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ItemKeywordDto>>;
    public getItemsKeywordsUsingGET(keywordName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ItemKeywordDto>>>;
    public getItemsKeywordsUsingGET(keywordName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ItemKeywordDto>>>;
    public getItemsKeywordsUsingGET(keywordName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (keywordName !== undefined && keywordName !== null) {
            queryParameters = queryParameters.set('keywordName', <any>keywordName);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ItemKeywordDto>>(`${this.basePath}/lookup/item-keywords`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This Api will get all origin in the system
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOriginsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<OriginDto>>;
    public getOriginsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OriginDto>>>;
    public getOriginsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OriginDto>>>;
    public getOriginsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OriginDto>>(`${this.basePath}/lookup/origins`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This Api will get all supplier Category in the system
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuppliersCategoryUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<SupplierCategoryDto>>;
    public getSuppliersCategoryUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SupplierCategoryDto>>>;
    public getSuppliersCategoryUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SupplierCategoryDto>>>;
    public getSuppliersCategoryUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SupplierCategoryDto>>(`${this.basePath}/lookup/suppliers-category`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get unit of measure (samples unit) in the system
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUnitOfMeasureUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<UomDto>>;
    public getUnitOfMeasureUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UomDto>>>;
    public getUnitOfMeasureUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UomDto>>>;
    public getUnitOfMeasureUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<UomDto>>(`${this.basePath}/lookup/uoms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * this api is responsiable for list all transportation for user
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gettranspTransportationDtosUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<TransportationDto>>;
    public gettranspTransportationDtosUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TransportationDto>>>;
    public gettranspTransportationDtosUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TransportationDto>>>;
    public gettranspTransportationDtosUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TransportationDto>>(`${this.basePath}/lookup/transportations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
