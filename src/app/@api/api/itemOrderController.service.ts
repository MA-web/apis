/**
 * apis backend
 * Ahmed Abdelrhman & Mohamed sabri
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountingOrderDto } from '../model/countingOrderDto';
import { ItemOrderDto } from '../model/itemOrderDto';
import { PageItemOrderDto } from '../model/pageItemOrderDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ItemOrderControllerService {

    protected basePath = 'https://apis.marksphinx.com:8060';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * acceptOrder
     *
     * @param orderId orderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acceptOrderUsingPUT(orderId: number, observe?: 'body', reportProgress?: boolean): Observable<ItemOrderDto>;
    public acceptOrderUsingPUT(orderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemOrderDto>>;
    public acceptOrderUsingPUT(orderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemOrderDto>>;
    public acceptOrderUsingPUT(orderId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling acceptOrderUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<ItemOrderDto>(`${this.basePath}/api/orders/${encodeURIComponent(String(orderId))}/accepted`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new order from user  about an existing quotation.
     *
     * @param authorization Authorization
     * @param itemOrderDto itemOrderDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addOrderUsingPOST(authorization: string, itemOrderDto: ItemOrderDto, observe?: 'body', reportProgress?: boolean): Observable<ItemOrderDto>;
    public addOrderUsingPOST(authorization: string, itemOrderDto: ItemOrderDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemOrderDto>>;
    public addOrderUsingPOST(authorization: string, itemOrderDto: ItemOrderDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemOrderDto>>;
    public addOrderUsingPOST(authorization: string, itemOrderDto: ItemOrderDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling addOrderUsingPOST.');
        }

        if (itemOrderDto === null || itemOrderDto === undefined) {
            throw new Error('Required parameter itemOrderDto was null or undefined when calling addOrderUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ItemOrderDto>(`${this.basePath}/api/orders`,
            itemOrderDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * countSuppliersOrder
     *
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countSuppliersOrderUsingGET(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public countSuppliersOrderUsingGET(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public countSuppliersOrderUsingGET(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public countSuppliersOrderUsingGET(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling countSuppliersOrderUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/api/orders/count-new-suppliers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * countUserAcceptedOrders
     *
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countUserAcceptedOrdersUsingGET(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public countUserAcceptedOrdersUsingGET(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public countUserAcceptedOrdersUsingGET(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public countUserAcceptedOrdersUsingGET(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling countUserAcceptedOrdersUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/api/orders/user-accepted-order`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * countUserOrders
     *
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countUserOrdersUsingGET(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<CountingOrderDto>;
    public countUserOrdersUsingGET(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountingOrderDto>>;
    public countUserOrdersUsingGET(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountingOrderDto>>;
    public countUserOrdersUsingGET(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling countUserOrdersUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CountingOrderDto>(`${this.basePath}/api/orders/user-counting`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * countacceptedSuppliersOrder
     *
     * @param supplierUsername supplierUsername
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countacceptedSuppliersOrderUsingGET(supplierUsername: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public countacceptedSuppliersOrderUsingGET(supplierUsername: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public countacceptedSuppliersOrderUsingGET(supplierUsername: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public countacceptedSuppliersOrderUsingGET(supplierUsername: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (supplierUsername === null || supplierUsername === undefined) {
            throw new Error('Required parameter supplierUsername was null or undefined when calling countacceptedSuppliersOrderUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/api/orders/count-accepted-suppliers/${encodeURIComponent(String(supplierUsername))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get order by order id
     *
     * @param orderId orderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrderByIdUsingGET(orderId: number, observe?: 'body', reportProgress?: boolean): Observable<ItemOrderDto>;
    public getOrderByIdUsingGET(orderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemOrderDto>>;
    public getOrderByIdUsingGET(orderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemOrderDto>>;
    public getOrderByIdUsingGET(orderId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getOrderByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ItemOrderDto>(`${this.basePath}/api/orders/${encodeURIComponent(String(orderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get page of orders for specific supplier by username from authorization header
     *
     * @param authorization Authorization
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrdersForSupplierUsingGET(authorization: string, page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<PageItemOrderDto>;
    public getOrdersForSupplierUsingGET(authorization: string, page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageItemOrderDto>>;
    public getOrdersForSupplierUsingGET(authorization: string, page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageItemOrderDto>>;
    public getOrdersForSupplierUsingGET(authorization: string, page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getOrdersForSupplierUsingGET.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageItemOrderDto>(`${this.basePath}/api/orders/suppliers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get page of orders for specific user by username from authorization header
     *
     * @param authorization Authorization
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrdersForUserUsingGET(authorization: string, page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<PageItemOrderDto>;
    public getOrdersForUserUsingGET(authorization: string, page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageItemOrderDto>>;
    public getOrdersForUserUsingGET(authorization: string, page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageItemOrderDto>>;
    public getOrdersForUserUsingGET(authorization: string, page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getOrdersForUserUsingGET.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageItemOrderDto>(`${this.basePath}/api/orders/users`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * rejectOrder
     *
     * @param orderId orderId
     * @param adjustment adjustment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rejectOrderUsingPUT(orderId: number, adjustment?: string, observe?: 'body', reportProgress?: boolean): Observable<ItemOrderDto>;
    public rejectOrderUsingPUT(orderId: number, adjustment?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemOrderDto>>;
    public rejectOrderUsingPUT(orderId: number, adjustment?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemOrderDto>>;
    public rejectOrderUsingPUT(orderId: number, adjustment?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling rejectOrderUsingPUT.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (adjustment !== undefined && adjustment !== null) {
            queryParameters = queryParameters.set('adjustment', <any>adjustment);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<ItemOrderDto>(`${this.basePath}/api/orders/${encodeURIComponent(String(orderId))}/rejected`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateOrder
     *
     * @param authorization Authorization
     * @param itemOrderDto itemOrderDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrderUsingPUT(authorization: string, itemOrderDto: ItemOrderDto, observe?: 'body', reportProgress?: boolean): Observable<ItemOrderDto>;
    public updateOrderUsingPUT(authorization: string, itemOrderDto: ItemOrderDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemOrderDto>>;
    public updateOrderUsingPUT(authorization: string, itemOrderDto: ItemOrderDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemOrderDto>>;
    public updateOrderUsingPUT(authorization: string, itemOrderDto: ItemOrderDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling updateOrderUsingPUT.');
        }

        if (itemOrderDto === null || itemOrderDto === undefined) {
            throw new Error('Required parameter itemOrderDto was null or undefined when calling updateOrderUsingPUT.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ItemOrderDto>(`${this.basePath}/api/orders`,
            itemOrderDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
