/**
 * apis backend
 * Ahmed Abdelrhman & Mohamed sabri
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { QuotationResponseDto } from '../model/quotationResponseDto';
import { QuotationVersionDto } from '../model/quotationVersionDto';
import { QuotationVersionReplyDto } from '../model/quotationVersionReplyDto';
import { QuotationVersionRequestDto } from '../model/quotationVersionRequestDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class QuotationControllerService {

    protected basePath = 'https://164.92.242.241:8060';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Accept Quotation from supplier
     *
     * @param quotationId quotationId
     * @param quotationVersionReplyDto quotationVersionReplyDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acceptSupplierQuotationUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'body', reportProgress?: boolean): Observable<QuotationVersionDto>;
    public acceptSupplierQuotationUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuotationVersionDto>>;
    public acceptSupplierQuotationUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuotationVersionDto>>;
    public acceptSupplierQuotationUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (quotationId === null || quotationId === undefined) {
            throw new Error('Required parameter quotationId was null or undefined when calling acceptSupplierQuotationUsingPUT.');
        }

        if (quotationVersionReplyDto === null || quotationVersionReplyDto === undefined) {
            throw new Error('Required parameter quotationVersionReplyDto was null or undefined when calling acceptSupplierQuotationUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<QuotationVersionDto>(`${this.basePath}/api/quotations/${encodeURIComponent(String(quotationId))}/supplier-accept`,
            quotationVersionReplyDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Accept Quotation from user
     *
     * @param quotationId quotationId
     * @param quotationVersionReplyDto quotationVersionReplyDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acceptUserQuotationUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'body', reportProgress?: boolean): Observable<QuotationVersionDto>;
    public acceptUserQuotationUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuotationVersionDto>>;
    public acceptUserQuotationUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuotationVersionDto>>;
    public acceptUserQuotationUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (quotationId === null || quotationId === undefined) {
            throw new Error('Required parameter quotationId was null or undefined when calling acceptUserQuotationUsingPUT.');
        }

        if (quotationVersionReplyDto === null || quotationVersionReplyDto === undefined) {
            throw new Error('Required parameter quotationVersionReplyDto was null or undefined when calling acceptUserQuotationUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<QuotationVersionDto>(`${this.basePath}/api/quotations/${encodeURIComponent(String(quotationId))}/user-accept`,
            quotationVersionReplyDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new quotation about an existing inquiry.
     *
     * @param quotationVersionRequestDto quotationVersionRequestDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addQuotationUsingPOST(quotationVersionRequestDto: QuotationVersionRequestDto, observe?: 'body', reportProgress?: boolean): Observable<QuotationVersionDto>;
    public addQuotationUsingPOST(quotationVersionRequestDto: QuotationVersionRequestDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuotationVersionDto>>;
    public addQuotationUsingPOST(quotationVersionRequestDto: QuotationVersionRequestDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuotationVersionDto>>;
    public addQuotationUsingPOST(quotationVersionRequestDto: QuotationVersionRequestDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (quotationVersionRequestDto === null || quotationVersionRequestDto === undefined) {
            throw new Error('Required parameter quotationVersionRequestDto was null or undefined when calling addQuotationUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<QuotationVersionDto>(`${this.basePath}/api/quotations`,
            quotationVersionRequestDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new customer Reply For user inquiry
     *
     * @param quotationId quotationId
     * @param quotationVersionReplyDto quotationVersionReplyDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSupplierReplyUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'body', reportProgress?: boolean): Observable<QuotationVersionDto>;
    public addSupplierReplyUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuotationVersionDto>>;
    public addSupplierReplyUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuotationVersionDto>>;
    public addSupplierReplyUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (quotationId === null || quotationId === undefined) {
            throw new Error('Required parameter quotationId was null or undefined when calling addSupplierReplyUsingPUT.');
        }

        if (quotationVersionReplyDto === null || quotationVersionReplyDto === undefined) {
            throw new Error('Required parameter quotationVersionReplyDto was null or undefined when calling addSupplierReplyUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<QuotationVersionDto>(`${this.basePath}/api/quotations/${encodeURIComponent(String(quotationId))}/supplier-reply`,
            quotationVersionReplyDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new customer Reply For user inquiry
     *
     * @param quotationId quotationId
     * @param quotationVersionReplyDto quotationVersionReplyDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addUserReplyUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'body', reportProgress?: boolean): Observable<QuotationVersionDto>;
    public addUserReplyUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuotationVersionDto>>;
    public addUserReplyUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuotationVersionDto>>;
    public addUserReplyUsingPUT(quotationId: number, quotationVersionReplyDto: QuotationVersionReplyDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (quotationId === null || quotationId === undefined) {
            throw new Error('Required parameter quotationId was null or undefined when calling addUserReplyUsingPUT.');
        }

        if (quotationVersionReplyDto === null || quotationVersionReplyDto === undefined) {
            throw new Error('Required parameter quotationVersionReplyDto was null or undefined when calling addUserReplyUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<QuotationVersionDto>(`${this.basePath}/api/quotations/${encodeURIComponent(String(quotationId))}/customer-reply`,
            quotationVersionReplyDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get Quotation by id
     *
     * @param quotationId quotationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuotationByIdUsingGET(quotationId: number, observe?: 'body', reportProgress?: boolean): Observable<QuotationResponseDto>;
    public getQuotationByIdUsingGET(quotationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuotationResponseDto>>;
    public getQuotationByIdUsingGET(quotationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuotationResponseDto>>;
    public getQuotationByIdUsingGET(quotationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (quotationId === null || quotationId === undefined) {
            throw new Error('Required parameter quotationId was null or undefined when calling getQuotationByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<QuotationResponseDto>(`${this.basePath}/api/quotations/${encodeURIComponent(String(quotationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
