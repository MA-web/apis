/**
 * apis backend
 * Ahmed Abdelrhman & Mohamed sabri
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { NewsDto } from '../model/newsDto';
import { PageNewsDto } from '../model/pageNewsDto';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class NewsControllerService {

    protected basePath = 'https://164.92.242.241:8060';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * count
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countUsingGET2(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: number; }>;
    public countUsingGET2(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: number; }>>;
    public countUsingGET2(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: number; }>>;
    public countUsingGET2(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<{ [key: string]: number; }>(`${this.basePath}/api/news/count`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getNewsById
     * 
     * @param newsId newsId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNewsByIdUsingGET(newsId: number, observe?: 'body', reportProgress?: boolean): Observable<NewsDto>;
    public getNewsByIdUsingGET(newsId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewsDto>>;
    public getNewsByIdUsingGET(newsId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewsDto>>;
    public getNewsByIdUsingGET(newsId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (newsId === null || newsId === undefined) {
            throw new Error('Required parameter newsId was null or undefined when calling getNewsByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<NewsDto>(`${this.basePath}/api/news/${encodeURIComponent(String(newsId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createNews
     * 
     * @param newsDto newsDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createNewsUsingPOST(newsDto: NewsDto, observe?: 'body', reportProgress?: boolean): Observable<NewsDto>;
    public createNewsUsingPOST(newsDto: NewsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewsDto>>;
    public createNewsUsingPOST(newsDto: NewsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewsDto>>;
    public createNewsUsingPOST(newsDto: NewsDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (newsDto === null || newsDto === undefined) {
            throw new Error('Required parameter newsDto was null or undefined when calling createNewsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<NewsDto>(`${this.basePath}/api/news`,
            newsDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteNews
     * 
     * @param newsId newsId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteNewsUsingDELETE(newsId: number, observe?: 'body', reportProgress?: boolean): Observable<NewsDto>;
    public deleteNewsUsingDELETE(newsId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewsDto>>;
    public deleteNewsUsingDELETE(newsId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewsDto>>;
    public deleteNewsUsingDELETE(newsId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (newsId === null || newsId === undefined) {
            throw new Error('Required parameter newsId was null or undefined when calling deleteNewsUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<NewsDto>(`${this.basePath}/api/news/${encodeURIComponent(String(newsId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAdminNews
     * 
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdminNewsUsingGET(page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<PageNewsDto>;
    public getAdminNewsUsingGET(page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageNewsDto>>;
    public getAdminNewsUsingGET(page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageNewsDto>>;
    public getAdminNewsUsingGET(page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageNewsDto>(`${this.basePath}/api/news`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * publishNews
     * 
     * @param newsId newsId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public publishNewsUsingPUT(newsId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public publishNewsUsingPUT(newsId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public publishNewsUsingPUT(newsId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public publishNewsUsingPUT(newsId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (newsId === null || newsId === undefined) {
            throw new Error('Required parameter newsId was null or undefined when calling publishNewsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/api/news/${encodeURIComponent(String(newsId))}/publish`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * unPublishNews
     * 
     * @param newsId newsId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unPublishNewsUsingPUT(newsId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unPublishNewsUsingPUT(newsId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unPublishNewsUsingPUT(newsId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unPublishNewsUsingPUT(newsId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (newsId === null || newsId === undefined) {
            throw new Error('Required parameter newsId was null or undefined when calling unPublishNewsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/api/news/${encodeURIComponent(String(newsId))}/unPublish`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateNews
     * 
     * @param newsDto newsDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateNewsUsingPUT(newsDto: NewsDto, observe?: 'body', reportProgress?: boolean): Observable<NewsDto>;
    public updateNewsUsingPUT(newsDto: NewsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewsDto>>;
    public updateNewsUsingPUT(newsDto: NewsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewsDto>>;
    public updateNewsUsingPUT(newsDto: NewsDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (newsDto === null || newsDto === undefined) {
            throw new Error('Required parameter newsDto was null or undefined when calling updateNewsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<NewsDto>(`${this.basePath}/api/news`,
            newsDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
