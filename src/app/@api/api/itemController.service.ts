/**
 * apis backend
 * Ahmed Abdelrhman & Mohamed sabri
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ItemAttachmentsDto } from '../model/itemAttachmentsDto';
import { ItemDraftDto } from '../model/itemDraftDto';
import { ItemDto } from '../model/itemDto';
import { ItemIncotermDto } from '../model/itemIncotermDto';
import { ItemPaymentTermDto } from '../model/itemPaymentTermDto';
import { ItemSearchFilter } from '../model/itemSearchFilter';
import { PageItemDto } from '../model/pageItemDto';
import { ResponseDto } from '../model/responseDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ItemControllerService {

    protected basePath = 'https://164.92.242.241:8060';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * This Api is responsible for save item as draft
     * 
     * @param itemDraftDto itemDraftDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addDraftedItemUsingPOST(itemDraftDto: ItemDraftDto, observe?: 'body', reportProgress?: boolean): Observable<ItemDto>;
    public addDraftedItemUsingPOST(itemDraftDto: ItemDraftDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemDto>>;
    public addDraftedItemUsingPOST(itemDraftDto: ItemDraftDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemDto>>;
    public addDraftedItemUsingPOST(itemDraftDto: ItemDraftDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemDraftDto === null || itemDraftDto === undefined) {
            throw new Error('Required parameter itemDraftDto was null or undefined when calling addDraftedItemUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ItemDto>(`${this.basePath}/api/items/draft`,
            itemDraftDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This Api is responsible for add a new item in the system 
     * 
     * @param itemDto itemDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addItemUsingPOST(itemDto: ItemDto, observe?: 'body', reportProgress?: boolean): Observable<ItemDto>;
    public addItemUsingPOST(itemDto: ItemDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemDto>>;
    public addItemUsingPOST(itemDto: ItemDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemDto>>;
    public addItemUsingPOST(itemDto: ItemDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemDto === null || itemDto === undefined) {
            throw new Error('Required parameter itemDto was null or undefined when calling addItemUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ItemDto>(`${this.basePath}/api/items`,
            itemDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * this api is responsiable to delete item from the system by change its status to deleted
     * 
     * @param itemId itemId
     * @param adjustment adjustment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteItemUsingDELETE(itemId: number, adjustment?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteItemUsingDELETE(itemId: number, adjustment?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteItemUsingDELETE(itemId: number, adjustment?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteItemUsingDELETE(itemId: number, adjustment?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling deleteItemUsingDELETE.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (adjustment !== undefined && adjustment !== null) {
            queryParameters = queryParameters.set('adjustment', <any>adjustment);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/items/${encodeURIComponent(String(itemId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This api is responsiable for filter all items for user.
     * 
     * @param itemSearchFilter itemSearchFilter
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public filterItemsForUserUsingPOST(itemSearchFilter: ItemSearchFilter, page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<PageItemDto>;
    public filterItemsForUserUsingPOST(itemSearchFilter: ItemSearchFilter, page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageItemDto>>;
    public filterItemsForUserUsingPOST(itemSearchFilter: ItemSearchFilter, page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageItemDto>>;
    public filterItemsForUserUsingPOST(itemSearchFilter: ItemSearchFilter, page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemSearchFilter === null || itemSearchFilter === undefined) {
            throw new Error('Required parameter itemSearchFilter was null or undefined when calling filterItemsForUserUsingPOST.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PageItemDto>(`${this.basePath}/api/items/filter`,
            itemSearchFilter,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * this api responsible for grt item by item id
     * 
     * @param itemId itemId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemByItemIdUsingGET(itemId: number, observe?: 'body', reportProgress?: boolean): Observable<ItemDto>;
    public getItemByItemIdUsingGET(itemId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemDto>>;
    public getItemByItemIdUsingGET(itemId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemDto>>;
    public getItemByItemIdUsingGET(itemId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getItemByItemIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ItemDto>(`${this.basePath}/api/items/${encodeURIComponent(String(itemId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List item incoterms by item id
     * 
     * @param itemId itemId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemIncotermsUsingGET(itemId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ItemIncotermDto>>;
    public getItemIncotermsUsingGET(itemId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ItemIncotermDto>>>;
    public getItemIncotermsUsingGET(itemId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ItemIncotermDto>>>;
    public getItemIncotermsUsingGET(itemId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getItemIncotermsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ItemIncotermDto>>(`${this.basePath}/api/items/${encodeURIComponent(String(itemId))}/incoterms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List item payment terms by item id
     * 
     * @param itemId itemId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemPaymentTermsUsingGET(itemId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ItemPaymentTermDto>>;
    public getItemPaymentTermsUsingGET(itemId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ItemPaymentTermDto>>>;
    public getItemPaymentTermsUsingGET(itemId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ItemPaymentTermDto>>>;
    public getItemPaymentTermsUsingGET(itemId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getItemPaymentTermsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ItemPaymentTermDto>>(`${this.basePath}/api/items/${encodeURIComponent(String(itemId))}/payment-terms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List items  for specific supplier in the system
     * 
     * @param supplierId supplierId
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemsForSupplierUsingGET(supplierId: number, page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<PageItemDto>;
    public getItemsForSupplierUsingGET(supplierId: number, page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageItemDto>>;
    public getItemsForSupplierUsingGET(supplierId: number, page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageItemDto>>;
    public getItemsForSupplierUsingGET(supplierId: number, page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (supplierId === null || supplierId === undefined) {
            throw new Error('Required parameter supplierId was null or undefined when calling getItemsForSupplierUsingGET.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageItemDto>(`${this.basePath}/api/items/suppliers/${encodeURIComponent(String(supplierId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * this api is responsiable for list all items for user 
     * 
     * @param itemName itemName
     * @param originsNames originsNames
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemsForUserUsingGET(itemName?: string, originsNames?: Array<string>, page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<PageItemDto>;
    public getItemsForUserUsingGET(itemName?: string, originsNames?: Array<string>, page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageItemDto>>;
    public getItemsForUserUsingGET(itemName?: string, originsNames?: Array<string>, page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageItemDto>>;
    public getItemsForUserUsingGET(itemName?: string, originsNames?: Array<string>, page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (itemName !== undefined && itemName !== null) {
            queryParameters = queryParameters.set('itemName', <any>itemName);
        }
        if (originsNames) {
            originsNames.forEach((element) => {
                queryParameters = queryParameters.append('originsNames', <any>element);
            })
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageItemDto>(`${this.basePath}/api/items`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get latest 6 published items(no need for authentication).
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLatestPublishedProductsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<PageItemDto>;
    public getLatestPublishedProductsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageItemDto>>;
    public getLatestPublishedProductsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageItemDto>>;
    public getLatestPublishedProductsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageItemDto>(`${this.basePath}/api/items/latest-published-items`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * this api responsible for get published item by item id
     * 
     * @param itemId itemId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublishedItemByItemIdUsingGET(itemId: number, observe?: 'body', reportProgress?: boolean): Observable<ItemDto>;
    public getPublishedItemByItemIdUsingGET(itemId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemDto>>;
    public getPublishedItemByItemIdUsingGET(itemId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemDto>>;
    public getPublishedItemByItemIdUsingGET(itemId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getPublishedItemByItemIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ItemDto>(`${this.basePath}/api/items/${encodeURIComponent(String(itemId))}/published`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get similar products by category and sub category
     * 
     * @param itemId itemId
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSimilarProductsUsingGET(itemId: number, page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<PageItemDto>;
    public getSimilarProductsUsingGET(itemId: number, page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageItemDto>>;
    public getSimilarProductsUsingGET(itemId: number, page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageItemDto>>;
    public getSimilarProductsUsingGET(itemId: number, page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getSimilarProductsUsingGET.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageItemDto>(`${this.basePath}/api/items/simliar-products/${encodeURIComponent(String(itemId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This Api is responsible for publish an approved item to the user in the portal
     * 
     * @param itemId itemId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public publishItemUsingPUT(itemId: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseDto>;
    public publishItemUsingPUT(itemId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDto>>;
    public publishItemUsingPUT(itemId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDto>>;
    public publishItemUsingPUT(itemId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling publishItemUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<ResponseDto>(`${this.basePath}/api/items/${encodeURIComponent(String(itemId))}/publishment`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search for published items by category,item name, supplier name and case number.
     * 
     * @param category category
     * @param page page
     * @param searchKey searchKey
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchForItemsUsingGET(category?: string, page?: number, searchKey?: string, size?: number, observe?: 'body', reportProgress?: boolean): Observable<PageItemDto>;
    public searchForItemsUsingGET(category?: string, page?: number, searchKey?: string, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageItemDto>>;
    public searchForItemsUsingGET(category?: string, page?: number, searchKey?: string, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageItemDto>>;
    public searchForItemsUsingGET(category?: string, page?: number, searchKey?: string, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (category !== undefined && category !== null) {
            queryParameters = queryParameters.set('category', <any>category);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (searchKey !== undefined && searchKey !== null) {
            queryParameters = queryParameters.set('searchKey', <any>searchKey);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageItemDto>(`${this.basePath}/api/items/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search items for specific supplier in the system by category, subCategory, origin and status
     * 
     * @param authorization Authorization
     * @param category category
     * @param itemName itemName
     * @param origin origin
     * @param page page
     * @param size size
     * @param status status
     * @param subCategory subCategory
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchItemsForSupplierUsingGET(authorization: string, category?: string, itemName?: string, origin?: string, page?: number, size?: number, status?: number, subCategory?: string, observe?: 'body', reportProgress?: boolean): Observable<PageItemDto>;
    public searchItemsForSupplierUsingGET(authorization: string, category?: string, itemName?: string, origin?: string, page?: number, size?: number, status?: number, subCategory?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageItemDto>>;
    public searchItemsForSupplierUsingGET(authorization: string, category?: string, itemName?: string, origin?: string, page?: number, size?: number, status?: number, subCategory?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageItemDto>>;
    public searchItemsForSupplierUsingGET(authorization: string, category?: string, itemName?: string, origin?: string, page?: number, size?: number, status?: number, subCategory?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling searchItemsForSupplierUsingGET.');
        }








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (category !== undefined && category !== null) {
            queryParameters = queryParameters.set('category', <any>category);
        }
        if (itemName !== undefined && itemName !== null) {
            queryParameters = queryParameters.set('itemName', <any>itemName);
        }
        if (origin !== undefined && origin !== null) {
            queryParameters = queryParameters.set('origin', <any>origin);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (subCategory !== undefined && subCategory !== null) {
            queryParameters = queryParameters.set('subCategory', <any>subCategory);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageItemDto>(`${this.basePath}/api/items/suppliers/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This Api is responsible for unpublish an approved item to the user in the portal
     * 
     * @param itemId itemId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unPublishItemUsingPUT(itemId: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseDto>;
    public unPublishItemUsingPUT(itemId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDto>>;
    public unPublishItemUsingPUT(itemId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDto>>;
    public unPublishItemUsingPUT(itemId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling unPublishItemUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<ResponseDto>(`${this.basePath}/api/items/${encodeURIComponent(String(itemId))}/unpublish`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * this api is responsible for update drafted item in the system
     * 
     * @param itemDraftDto itemDraftDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDraftedItemUsingPUT(itemDraftDto: ItemDraftDto, observe?: 'body', reportProgress?: boolean): Observable<ItemDto>;
    public updateDraftedItemUsingPUT(itemDraftDto: ItemDraftDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemDto>>;
    public updateDraftedItemUsingPUT(itemDraftDto: ItemDraftDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemDto>>;
    public updateDraftedItemUsingPUT(itemDraftDto: ItemDraftDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemDraftDto === null || itemDraftDto === undefined) {
            throw new Error('Required parameter itemDraftDto was null or undefined when calling updateDraftedItemUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ItemDto>(`${this.basePath}/api/items/draft`,
            itemDraftDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update item attachments
     * 
     * @param itemAttachmentsDto itemAttachmentsDto
     * @param itemId itemId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateItemAttachmentsUsingPUT(itemAttachmentsDto: ItemAttachmentsDto, itemId: number, observe?: 'body', reportProgress?: boolean): Observable<ItemDto>;
    public updateItemAttachmentsUsingPUT(itemAttachmentsDto: ItemAttachmentsDto, itemId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemDto>>;
    public updateItemAttachmentsUsingPUT(itemAttachmentsDto: ItemAttachmentsDto, itemId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemDto>>;
    public updateItemAttachmentsUsingPUT(itemAttachmentsDto: ItemAttachmentsDto, itemId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemAttachmentsDto === null || itemAttachmentsDto === undefined) {
            throw new Error('Required parameter itemAttachmentsDto was null or undefined when calling updateItemAttachmentsUsingPUT.');
        }

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling updateItemAttachmentsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ItemDto>(`${this.basePath}/api/items/attchments/${encodeURIComponent(String(itemId))}`,
            itemAttachmentsDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * this api is responsible for update item in the system
     * 
     * @param itemDto itemDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateItemUsingPUT(itemDto: ItemDto, observe?: 'body', reportProgress?: boolean): Observable<ItemDto>;
    public updateItemUsingPUT(itemDto: ItemDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemDto>>;
    public updateItemUsingPUT(itemDto: ItemDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemDto>>;
    public updateItemUsingPUT(itemDto: ItemDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemDto === null || itemDto === undefined) {
            throw new Error('Required parameter itemDto was null or undefined when calling updateItemUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ItemDto>(`${this.basePath}/api/items`,
            itemDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
