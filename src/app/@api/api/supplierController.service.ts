/**
 * apis backend
 * Ahmed Abdelrhman & Mohamed sabri
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { OurSuppliersDto } from '../model/ourSuppliersDto';
import { SupplierDto } from '../model/supplierDto';
import { SupplierEmployeeDto } from '../model/supplierEmployeeDto';
import { SupplierProfileDto } from '../model/supplierProfileDto';
import { UpdateSupplierProfileDto } from '../model/updateSupplierProfileDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SupplierControllerService {

    protected basePath = 'https://164.92.242.241:8060';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get suppliers list for &#39;our suppliers&#39; page
     * 
     * @param itemCertificatesIds 
     * @param itemOriginId 
     * @param itemSampleTypeId 
     * @param page page
     * @param size size
     * @param supplierName 
     * @param supplierTypeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOurSuppliersUsingGET(itemCertificatesIds?: Array<number>, itemOriginId?: number, itemSampleTypeId?: number, page?: number, size?: number, supplierName?: string, supplierTypeId?: number, observe?: 'body', reportProgress?: boolean): Observable<OurSuppliersDto>;
    public getOurSuppliersUsingGET(itemCertificatesIds?: Array<number>, itemOriginId?: number, itemSampleTypeId?: number, page?: number, size?: number, supplierName?: string, supplierTypeId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OurSuppliersDto>>;
    public getOurSuppliersUsingGET(itemCertificatesIds?: Array<number>, itemOriginId?: number, itemSampleTypeId?: number, page?: number, size?: number, supplierName?: string, supplierTypeId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OurSuppliersDto>>;
    public getOurSuppliersUsingGET(itemCertificatesIds?: Array<number>, itemOriginId?: number, itemSampleTypeId?: number, page?: number, size?: number, supplierName?: string, supplierTypeId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (itemCertificatesIds) {
            itemCertificatesIds.forEach((element) => {
                queryParameters = queryParameters.append('itemCertificatesIds', <any>element);
            })
        }
        if (itemOriginId !== undefined && itemOriginId !== null) {
            queryParameters = queryParameters.set('itemOriginId', <any>itemOriginId);
        }
        if (itemSampleTypeId !== undefined && itemSampleTypeId !== null) {
            queryParameters = queryParameters.set('itemSampleTypeId', <any>itemSampleTypeId);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (supplierName !== undefined && supplierName !== null) {
            queryParameters = queryParameters.set('supplierName', <any>supplierName);
        }
        if (supplierTypeId !== undefined && supplierTypeId !== null) {
            queryParameters = queryParameters.set('supplierTypeId', <any>supplierTypeId);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OurSuppliersDto>(`${this.basePath}/api/suppliers/ourSuppliers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get profile completion percentage
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProfilePercentageUsingGET(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: number; }>;
    public getProfilePercentageUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: number; }>>;
    public getProfilePercentageUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: number; }>>;
    public getProfilePercentageUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<{ [key: string]: number; }>(`${this.basePath}/api/suppliers/dashboard/profilePercentage`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get supplier details for specific supplier in the system
     * 
     * @param supplierId supplierId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSupplierDetailsUsingGET(supplierId: number, observe?: 'body', reportProgress?: boolean): Observable<SupplierDto>;
    public getSupplierDetailsUsingGET(supplierId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SupplierDto>>;
    public getSupplierDetailsUsingGET(supplierId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SupplierDto>>;
    public getSupplierDetailsUsingGET(supplierId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (supplierId === null || supplierId === undefined) {
            throw new Error('Required parameter supplierId was null or undefined when calling getSupplierDetailsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SupplierDto>(`${this.basePath}/api/suppliers/${encodeURIComponent(String(supplierId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get logged in supplier profile
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSupplierProfileUsingGET(observe?: 'body', reportProgress?: boolean): Observable<SupplierProfileDto>;
    public getSupplierProfileUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SupplierProfileDto>>;
    public getSupplierProfileUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SupplierProfileDto>>;
    public getSupplierProfileUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SupplierProfileDto>(`${this.basePath}/api/suppliers/profile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update supplier profile
     * 
     * @param updateSupplierProfileDto updateSupplierProfileDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSupplierProfileUsingPUT(updateSupplierProfileDto: UpdateSupplierProfileDto, observe?: 'body', reportProgress?: boolean): Observable<SupplierEmployeeDto>;
    public updateSupplierProfileUsingPUT(updateSupplierProfileDto: UpdateSupplierProfileDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SupplierEmployeeDto>>;
    public updateSupplierProfileUsingPUT(updateSupplierProfileDto: UpdateSupplierProfileDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SupplierEmployeeDto>>;
    public updateSupplierProfileUsingPUT(updateSupplierProfileDto: UpdateSupplierProfileDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (updateSupplierProfileDto === null || updateSupplierProfileDto === undefined) {
            throw new Error('Required parameter updateSupplierProfileDto was null or undefined when calling updateSupplierProfileUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<SupplierEmployeeDto>(`${this.basePath}/api/suppliers/profile`,
            updateSupplierProfileDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
